generator client {
  provider = "prisma-client-js"
  output   = "generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model notifications {
  notification_id Int       @id @default(autoincrement())
  user_id         Int
  message         String
  is_read         Boolean?  @default(false)
  created_at      DateTime? @default(now()) @db.Timestamp(6)
  users           users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model project_members {
  project_id Int
  user_id    Int
  role       String?  @db.VarChar(50)
  projects   projects @relation(fields: [project_id], references: [project_id], onDelete: Cascade, onUpdate: NoAction)
  users      users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([project_id, user_id])
}

model projects {
  project_id      Int                      @id @default(autoincrement())
  project_name    String                   @db.VarChar(100)
  description     String?
  created_at      DateTime?                @default(now()) @db.Timestamp(6)
  updated_at      DateTime?                @default(now()) @db.Timestamp(6)
  owner_id        Int
  search_vector   Unsupported("tsvector")?
  project_members project_members[]
  users           users                    @relation(fields: [owner_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  tasks           tasks[]

  @@index([search_vector], map: "idx_projects_search_vector", type: Gin)
}

model task_attachments {
  attachment_id Int       @id @default(autoincrement())
  task_id       Int
  file_path     String    @db.VarChar(255)
  uploaded_at   DateTime? @default(now()) @db.Timestamp(6)
  tasks         tasks     @relation(fields: [task_id], references: [task_id], onDelete: Cascade, onUpdate: NoAction)
}

model task_comments {
  comment_id    Int                      @id @default(autoincrement())
  task_id       Int
  user_id       Int
  comment_text  String
  created_at    DateTime?                @default(now()) @db.Timestamp(6)
  search_vector Unsupported("tsvector")?
  tasks         tasks                    @relation(fields: [task_id], references: [task_id], onDelete: Cascade, onUpdate: NoAction)
  users         users                    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([search_vector], map: "idx_task_comments_search_vector", type: Gin)
}

model task_statuses {
  status_id   Int     @id @default(autoincrement())
  status_name String  @unique @db.VarChar(50)
  tasks       tasks[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model tasks {
  task_id          Int                      @id @default(autoincrement())
  task_name        String                   @db.VarChar(100)
  description      String?
  created_at       DateTime?                @default(now()) @db.Timestamp(6)
  updated_at       DateTime?                @default(now()) @db.Timestamp(6)
  due_date         DateTime?                @db.Timestamp(6)
  priority         Int?
  status_id        Int
  project_id       Int
  assignee_id      Int?
  search_vector    Unsupported("tsvector")?
  task_attachments task_attachments[]
  task_comments    task_comments[]
  users            users?                   @relation(fields: [assignee_id], references: [user_id], onUpdate: NoAction)
  projects         projects                 @relation(fields: [project_id], references: [project_id], onDelete: Cascade, onUpdate: NoAction)
  task_statuses    task_statuses            @relation(fields: [status_id], references: [status_id], onUpdate: NoAction)

  @@index([search_vector], map: "idx_tasks_search_vector", type: Gin)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  user_id         Int               @id @default(autoincrement())
  username        String            @unique @db.VarChar(50)
  email           String            @unique @db.VarChar(100)
  password_hash   String            @db.VarChar(255)
  created_at      DateTime?         @default(now()) @db.Timestamp(6)
  updated_at      DateTime?         @default(now()) @db.Timestamp(6)
  role            String?           @default("user") @db.VarChar(50)
  notifications   notifications[]
  project_members project_members[]
  projects        projects[]
  task_comments   task_comments[]
  tasks           tasks[]
}
